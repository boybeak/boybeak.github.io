<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-07-11T14:52:02+00:00</updated><id>/feed.xml</id><title type="html">Boybeak</title><subtitle>我也不知道到底有没有人看我的博客</subtitle><author><name>boybeak</name></author><entry><title type="html">让PAG动画在富文本中动起来</title><link href="/android%E6%8A%80%E5%B7%A7/2025/07/10/%E8%AE%A9PAG%E5%8A%A8%E7%94%BB%E5%9C%A8%E5%AF%8C%E6%96%87%E6%9C%AC%E4%B8%AD%E5%8A%A8%E8%B5%B7%E6%9D%A5.html" rel="alternate" type="text/html" title="让PAG动画在富文本中动起来" /><published>2025-07-10T21:22:00+00:00</published><updated>2025-07-10T21:22:00+00:00</updated><id>/android%E6%8A%80%E5%B7%A7/2025/07/10/%E8%AE%A9PAG%E5%8A%A8%E7%94%BB%E5%9C%A8%E5%AF%8C%E6%96%87%E6%9C%AC%E4%B8%AD%E5%8A%A8%E8%B5%B7%E6%9D%A5</id><content type="html" xml:base="/android%E6%8A%80%E5%B7%A7/2025/07/10/%E8%AE%A9PAG%E5%8A%A8%E7%94%BB%E5%9C%A8%E5%AF%8C%E6%96%87%E6%9C%AC%E4%B8%AD%E5%8A%A8%E8%B5%B7%E6%9D%A5.html"><![CDATA[<p>我也是最近才接触到了PAG动画，PAG动画就是直播间送礼物时，礼物特效播放的那种动画。类似的是Lottie，但是Lottie相比PAG来说，不能做的很复杂，对于复杂动画播放效率不高。
但是这玩意儿它不能放入Spannable富文本中播放。您可能问了，谁会把礼物特效放在富文本中播放啊？对啊，我也想问啊，做礼物特效场景的库，干嘛非得塞到富文本中啊，谁能知道产品脑子里想的是什么啊？</p>

<p><img src="/assets/pag-drawable.gif" alt="page-drawable" /></p>

<p>我经过几日研究，发现这也不是不能实现的，只不过又得曲线救国了。</p>

<h2 id="一pag是什么">一、PAG是什么？</h2>
<blockquote>
  <p>Portable Animated Graphics 是一套完整的动效工作流解决方案。
目标是降低或消除动效相关的研发成本，能够一键将设计师在 AE（Adobe After Effects）中制作的动效内容导出成素材文件，并快速上线应用于几乎所有的主流平台。</p>
</blockquote>

<p>这是其<a href="https://pag.io/">官网</a>的介绍。</p>

<h3 id="11-pag怎么使用">1.1 PAG怎么使用？</h3>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="s1">'com.tencent.tav:libpag:libpag:4.4.25'</span>
</code></pre></div></div>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;org.libpag.PAGImageView</span>
    <span class="na">android:id=</span><span class="s">"@+id/pagImageView"</span>
    <span class="na">android:layout_width=</span><span class="s">"240dp"</span>
    <span class="na">android:layout_height=</span><span class="s">"240dp"</span>
    <span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pagImageView</span><span class="p">.</span><span class="n">path</span> <span class="p">=</span> <span class="s">"assets://live_follow.pag"</span>
<span class="n">pagImageView</span><span class="p">.</span><span class="nf">setRepeatCount</span><span class="p">(-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">pagImageView</span><span class="p">.</span><span class="nf">play</span><span class="p">()</span>
</code></pre></div></div>

<p>运行效果可参考文章开头的动图中位于上方的控件效果。</p>

<p>基本使用是不是很简单？但是很遗憾的是，这些并不能直接在富文本中使用。</p>

<h2 id="二如何让pag动画在富文本中动起来">二、如何让PAG动画在富文本中动起来？</h2>

<p>富文本，在Android中就是Spannable那一套东西，而在富文本中展示图像，就需要ImageSpan。我们的思路就是，让ImageSpan可以对接Pag动画。</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PAGSpan</span><span class="p">(</span><span class="n">activity</span><span class="p">:</span> <span class="nc">Activity</span><span class="p">,</span> <span class="n">onUpdate</span><span class="p">:</span> <span class="p">(()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)?</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">:</span> <span class="nc">ImageSpan</span><span class="p">(</span><span class="nc">PAGDrawable</span><span class="p">(</span><span class="n">activity</span><span class="p">,</span> <span class="n">onUpdate</span><span class="p">))</span> <span class="p">{</span>

    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">TAG</span> <span class="p">=</span> <span class="s">"PAGSpan"</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="py">path</span><span class="p">:</span> <span class="nc">String</span><span class="p">?</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">pagDrawable</span><span class="p">.</span><span class="n">path</span>
        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">pagDrawable</span><span class="p">.</span><span class="n">path</span> <span class="p">=</span> <span class="n">value</span>
        <span class="p">}</span>
    <span class="kd">val</span> <span class="py">pagDrawable</span><span class="p">:</span> <span class="nc">PAGDrawable</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">drawable</span> <span class="k">as</span> <span class="nc">PAGDrawable</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getSize</span><span class="p">(</span>
        <span class="n">paint</span><span class="p">:</span> <span class="nc">Paint</span><span class="p">,</span>
        <span class="n">text</span><span class="p">:</span> <span class="nc">CharSequence</span><span class="p">?,</span>
        <span class="n">start</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
        <span class="n">end</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
        <span class="n">fm</span><span class="p">:</span> <span class="nc">Paint</span><span class="p">.</span><span class="nc">FontMetricsInt</span><span class="p">?</span>
    <span class="p">):</span> <span class="nc">Int</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">width</span> <span class="p">=</span> <span class="p">(</span><span class="n">paint</span><span class="p">.</span><span class="nf">measureText</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span> <span class="p">+</span> <span class="mf">0.5f</span><span class="p">).</span><span class="nf">toInt</span><span class="p">()</span>
        <span class="n">pagDrawable</span><span class="p">.</span><span class="nf">setBounds</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">paint</span><span class="p">.</span><span class="n">textSize</span><span class="p">.</span><span class="nf">toInt</span><span class="p">())</span>
        <span class="k">return</span> <span class="n">width</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>只要把这个PAGSapn塞入SpannableString就可以展示一个PAG动画了，当然，还需要PAGDrawable的支持。</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PAGDrawable</span><span class="p">(</span><span class="n">activity</span><span class="p">:</span> <span class="nc">Activity</span><span class="p">,</span> <span class="k">private</span> <span class="kd">val</span> <span class="py">onUpdate</span><span class="p">:</span> <span class="p">(()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)?</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Drawable</span><span class="p">(),</span> <span class="nc">PAGDrawableManager</span><span class="p">.</span><span class="nc">OnPAGDrawCallback</span> <span class="p">{</span>

    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">TAG</span> <span class="p">=</span> <span class="s">"PAGDrawable"</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="kd">var</span> <span class="py">activityRef</span> <span class="p">=</span> <span class="nc">WeakReference</span><span class="p">&lt;</span><span class="nc">Activity</span><span class="p">&gt;(</span><span class="n">activity</span><span class="p">)</span>
    <span class="k">private</span> <span class="kd">var</span> <span class="py">bitmapRef</span><span class="p">:</span> <span class="nc">WeakReference</span><span class="p">&lt;</span><span class="nc">Bitmap</span><span class="p">&gt;?</span> <span class="p">=</span> <span class="k">null</span>
    <span class="kd">var</span> <span class="py">path</span><span class="p">:</span> <span class="nc">String</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">val</span> <span class="py">oldValue</span> <span class="p">=</span> <span class="n">field</span>
            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">oldValue</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">stop</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">start</span><span class="p">()</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nf">stop</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">srcRect</span> <span class="k">by</span> <span class="nf">lazy</span> <span class="p">{</span> <span class="nc">Rect</span><span class="p">()</span> <span class="p">}</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">dstRect</span> <span class="k">by</span> <span class="nf">lazy</span> <span class="p">{</span> <span class="nc">Rect</span><span class="p">()</span> <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">start</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">p</span> <span class="p">=</span> <span class="n">path</span> <span class="o">?:</span> <span class="k">throw</span> <span class="nc">IllegalStateException</span><span class="p">(</span><span class="s">"set path value before call start"</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">activity</span> <span class="p">=</span> <span class="n">activityRef</span><span class="p">.</span><span class="k">get</span><span class="p">()</span> <span class="o">?:</span> <span class="k">return</span>
        <span class="nc">PAGDrawableManager</span><span class="p">.</span><span class="nf">obtain</span><span class="p">(</span><span class="n">activity</span><span class="p">).</span><span class="nf">register</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">fun</span> <span class="nf">stop</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">p</span> <span class="p">=</span> <span class="n">path</span> <span class="o">?:</span> <span class="k">return</span>
        <span class="kd">val</span> <span class="py">activity</span> <span class="p">=</span> <span class="n">activityRef</span><span class="p">.</span><span class="k">get</span><span class="p">()</span> <span class="o">?:</span> <span class="k">return</span>
        <span class="nc">PAGDrawableManager</span><span class="p">.</span><span class="nf">obtain</span><span class="p">(</span><span class="n">activity</span><span class="p">).</span><span class="nf">unregister</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">draw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="nc">Canvas</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">bitmap</span> <span class="p">=</span> <span class="n">bitmapRef</span><span class="o">?.</span><span class="k">get</span><span class="p">()</span> <span class="o">?:</span> <span class="k">return</span>

        <span class="c1">// 获取原始尺寸和目标尺寸</span>
        <span class="kd">val</span> <span class="py">srcWidth</span> <span class="p">=</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="nf">toFloat</span><span class="p">()</span>
        <span class="kd">val</span> <span class="py">srcHeight</span> <span class="p">=</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="nf">toFloat</span><span class="p">()</span>
        <span class="kd">val</span> <span class="py">dstWidth</span> <span class="p">=</span> <span class="n">bounds</span><span class="p">.</span><span class="nf">width</span><span class="p">().</span><span class="nf">toFloat</span><span class="p">()</span>
        <span class="kd">val</span> <span class="py">dstHeight</span> <span class="p">=</span> <span class="n">bounds</span><span class="p">.</span><span class="nf">height</span><span class="p">().</span><span class="nf">toFloat</span><span class="p">()</span>

        <span class="c1">// 计算缩放比例（取宽度和高度比例中较小的）</span>
        <span class="kd">val</span> <span class="py">scale</span> <span class="p">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">dstWidth</span> <span class="p">/</span> <span class="n">srcWidth</span><span class="p">,</span> <span class="n">dstHeight</span> <span class="p">/</span> <span class="n">srcHeight</span><span class="p">)</span>

        <span class="c1">// 计算缩放后尺寸</span>
        <span class="kd">val</span> <span class="py">scaledWidth</span> <span class="p">=</span> <span class="n">srcWidth</span> <span class="p">*</span> <span class="n">scale</span>
        <span class="kd">val</span> <span class="py">scaledHeight</span> <span class="p">=</span> <span class="n">srcHeight</span> <span class="p">*</span> <span class="n">scale</span>

        <span class="c1">// 计算居中位置</span>
        <span class="kd">val</span> <span class="py">left</span> <span class="p">=</span> <span class="p">(</span><span class="n">dstWidth</span> <span class="p">-</span> <span class="n">scaledWidth</span><span class="p">)</span> <span class="p">/</span> <span class="mi">2</span>
        <span class="kd">val</span> <span class="py">top</span> <span class="p">=</span> <span class="p">(</span><span class="n">dstHeight</span> <span class="p">-</span> <span class="n">scaledHeight</span><span class="p">)</span> <span class="p">/</span> <span class="mi">2</span>

        <span class="c1">// 设置源矩形（完整原始图片）</span>
        <span class="n">srcRect</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>

        <span class="c1">// 创建目标矩形（保持比例并居中）</span>
        <span class="n">dstRect</span><span class="p">.</span><span class="k">set</span><span class="p">(</span>
            <span class="n">left</span><span class="p">.</span><span class="nf">toInt</span><span class="p">(),</span>
            <span class="n">top</span><span class="p">.</span><span class="nf">toInt</span><span class="p">(),</span>
            <span class="p">(</span><span class="n">left</span> <span class="p">+</span> <span class="n">scaledWidth</span><span class="p">).</span><span class="nf">toInt</span><span class="p">(),</span>
            <span class="p">(</span><span class="n">top</span> <span class="p">+</span> <span class="n">scaledHeight</span><span class="p">).</span><span class="nf">toInt</span><span class="p">()</span>
        <span class="p">)</span>
        <span class="n">canvas</span><span class="p">.</span><span class="nf">drawBitmap</span><span class="p">(</span><span class="n">bitmap</span><span class="p">,</span> <span class="n">srcRect</span><span class="p">,</span> <span class="n">dstRect</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>

        <span class="n">onUpdate</span><span class="o">?.</span><span class="nf">invoke</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">bitmap</span><span class="p">:</span> <span class="nc">Bitmap</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">bitmapRef</span> <span class="p">=</span> <span class="nc">WeakReference</span><span class="p">(</span><span class="n">bitmap</span><span class="p">)</span>
        <span class="nf">invalidateSelf</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">setAlpha</span><span class="p">(</span><span class="n">alpha</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">setColorFilter</span><span class="p">(</span><span class="n">colorFilter</span><span class="p">:</span> <span class="nc">ColorFilter</span><span class="p">?)</span> <span class="p">{}</span>

    <span class="nd">@Deprecated</span><span class="p">(</span><span class="s">"Deprecated in Java"</span><span class="p">)</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getOpacity</span><span class="p">():</span> <span class="nc">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nc">PixelFormat</span><span class="p">.</span><span class="nc">TRANSLUCENT</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在PAGDrawable中，主要是靠<code class="language-plaintext highlighter-rouge">PAGDrawableManager</code>控制动画播放，而PAGDrawableManager中，主要是维护了依托于PAGImageView的刷新回调分发，当创建了一个PAGDrawable时，会根据绑定的pag资源路径，进行创建或者查找一个PAGImageView，并将其放置在当前activity的屏幕窗口之外的位置，让其一直播放，并进行刷新事件的订阅，刷新事</p>

<p><strong>注意，这并不是一个严肃的实现方式，只是一种迫于无奈之下的奇技淫巧，可改进空间可能很大，只是提供一种思路。</strong></p>

<p>源码地址：<a href="https://github.com/boybeak/PagDrawable">PagDrawable</a></p>]]></content><author><name>boybeak</name></author><category term="Android技巧" /><category term="Android" /><category term="PAG动画" /><summary type="html"><![CDATA[我也是最近才接触到了PAG动画，PAG动画就是直播间送礼物时，礼物特效播放的那种动画。类似的是Lottie，但是Lottie相比PAG来说，不能做的很复杂，对于复杂动画播放效率不高。 但是这玩意儿它不能放入Spannable富文本中播放。您可能问了，谁会把礼物特效放在富文本中播放啊？对啊，我也想问啊，做礼物特效场景的库，干嘛非得塞到富文本中啊，谁能知道产品脑子里想的是什么啊？]]></summary></entry><entry><title type="html">一个冷门库J2V8的赋能之旅——深度绑定机制的实现</title><link href="/android%E6%8A%80%E5%B7%A7/2025/03/29/%E4%B8%80%E4%B8%AA%E5%86%B7%E9%97%A8%E5%BA%93J2V8%E7%9A%84%E8%B5%8B%E8%83%BD%E4%B9%8B%E6%97%85-%E6%B7%B1%E5%BA%A6%E7%BB%91%E5%AE%9A%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E7%8E%B0.html" rel="alternate" type="text/html" title="一个冷门库J2V8的赋能之旅——深度绑定机制的实现" /><published>2025-03-29T21:22:00+00:00</published><updated>2025-03-29T21:22:00+00:00</updated><id>/android%E6%8A%80%E5%B7%A7/2025/03/29/%E4%B8%80%E4%B8%AA%E5%86%B7%E9%97%A8%E5%BA%93J2V8%E7%9A%84%E8%B5%8B%E8%83%BD%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E6%B7%B1%E5%BA%A6%E7%BB%91%E5%AE%9A%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E7%8E%B0</id><content type="html" xml:base="/android%E6%8A%80%E5%B7%A7/2025/03/29/%E4%B8%80%E4%B8%AA%E5%86%B7%E9%97%A8%E5%BA%93J2V8%E7%9A%84%E8%B5%8B%E8%83%BD%E4%B9%8B%E6%97%85-%E6%B7%B1%E5%BA%A6%E7%BB%91%E5%AE%9A%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E7%8E%B0.html"><![CDATA[<p>不知道各位大神在工作中有没有用到过J2V8，简单介绍一下J2V8，这是谷歌开源的大名鼎鼎的JS执行引擎V8的java封装，旨在将V8引擎引入到java的开发项目中，这样就可以在java项目中执行js代码了。
为什么要使用这个库呢？因为我之前的工作是做SDK，这个SDK的一个核心功能就是作为JS的容器，将JS的代码在移动端跑起来，当然，WebView本身就可以执行JS代码，J2V8是作为高性能的替代引入的，目的是在运行JS游戏时更高效。</p>

<!-- more -->

<p>该文章改自我的博客文章<a href="https://boybeak.github.io/android%E6%8A%80%E5%B7%A7/2023/08/12/J2V8%E6%B7%B1%E5%BA%A6%E7%BB%91%E5%AE%9A%E6%9C%BA%E5%88%B6%E5%88%86%E4%BA%AB.html">J2V8深度绑定机制分享</a></p>

<p>项目源码链接：<a href="https://github.com/boybeak/v8x">v8x</a></p>

<h2 id="引入">引入</h2>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 核心库（必选）</span>
<span class="n">implementation</span> <span class="s1">'com.eclipsesource.j2v8:j2v8:6.2.0@aar'</span>

<span class="c1">// 按需选择 CPU 架构支持（以下为常见架构）</span>
<span class="n">implementation</span> <span class="s1">'com.eclipsesource.j2v8:j2v8-4.8.0-android-arm64:6.2.0@aar'</span>  <span class="c1">// 64位 ARM</span>
<span class="n">implementation</span> <span class="s1">'com.eclipsesource.j2v8:j2v8-4.8.0-android-armeabi-v7a:6.2.0@aar'</span>  <span class="c1">// 32位 ARM</span>
</code></pre></div></div>

<h2 id="基本使用">基本使用</h2>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">v8</span> <span class="p">=</span> <span class="nc">V8</span><span class="p">.</span><span class="nf">createV8Runtime</span><span class="p">()</span>
<span class="kd">val</span> <span class="py">canvas</span> <span class="p">=</span> <span class="nc">V8Object</span><span class="p">(</span><span class="n">v8</span><span class="p">);</span>
<span class="n">canvas</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s">"getContext"</span><span class="p">,</span> <span class="nc">V8Function</span><span class="p">(</span><span class="n">v8</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="p">-&gt;</span>
    <span class="nf">createContextObject</span><span class="p">(</span><span class="n">v8</span><span class="p">,</span> <span class="n">androidCanvas</span><span class="p">)</span>
<span class="p">})</span>
<span class="n">v8</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s">"canvas"</span><span class="p">,</span> <span class="n">canvas</span><span class="p">)</span>
<span class="n">v8</span><span class="p">.</span><span class="nf">executeVoidScript</span><span class="p">(</span><span class="s">"这里是js代码"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="问题背景">问题背景</h2>
<p>做JS小游戏的容器时，我们的架构是这样的，由Android的原声控件(主要是SurfaceView)作为画面的渲染，然后封装一个context(这里指的是web canvas的context，而非Android原生的Context类)的java对象，将这个对象传递到J2V8的JS运行环境中。这样做，就是为了能将JS的执行与游戏画面的渲染，都能达到一个最高效的状态。
但是同样也有问题，就是双层(JS层/Java层)的对象中变量不一致的问题，比如通过J2V8执行下面js代码。</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 这里的ctx是Java层返回的V8Object对象</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">lineWidth</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="p">...</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span>
</code></pre></div></div>
<p>JS层的ctx实际上是有一个对应的Java对象的，在js代码中，为ctx赋值了<code class="language-plaintext highlighter-rouge">ctx.lineWidth = 10;</code>，然后再执行<code class="language-plaintext highlighter-rouge">ctx.stroke()</code>方法，同样的，stroke方法也是java层对象执行，但是问题是，<code class="language-plaintext highlighter-rouge">ctx.lineWidth = 10</code>这句代码，java层的对象并不能感知到。导致绘制时，就有问题。</p>

<h2 id="旧的方案">旧的方案</h2>
<p>旧的方案是，让写js框架的同学，写一个代理，在遇到<code class="language-plaintext highlighter-rouge">ctx.lineWidth = 10</code>这类代码时，执行一个ctx中约定的方法，将新值以及变量名都通知给java端，但是这样做就有问题了：</p>
<ol>
  <li>有这种需求的类可能很多，每一个都要JS层做相应的适配，这会增加工作量和调试沟通成本；</li>
  <li>并不是所有属性的变化都是Java层关心的；</li>
  <li>JS层并不知道Java层的属性与类的关系，容易错乱，导致通知了属性变化，却不知道是哪个对象的属性变化了；</li>
  <li>后期Java层类做了变动，需要JS层做相应修改，一旦遗漏，就会产生bug；</li>
  <li>js框架需要尽可能在多端保持一致，不可能单独为安卓写这么多定制代码；</li>
</ol>

<p>所以，卑微的Android狗就只能土法炼钢、曲线救国搞出这个J2V8的深度绑定机制了。</p>

<h2 id="二j2v8binding">二、J2V8Binding</h2>

<p>J2V8Binding的目标是，将JS层属性的变更感知，全部控制在Java层内，无需JS层参与额外代码。</p>

<h3 id="21-基本原理">2.1 基本原理</h3>

<p>与旧方案类似的，我们仍然需要一个JS层的代理，而与旧方案不同的，新方案的代理是由Java层“生成”。</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">CREATE_PROXY_JS</span> <span class="p">=</span> <span class="s">"""
function v8CreateProxy(obj) {
    return new Proxy(obj, {
        set: function(target, key, value) {
            // 在此拦截需要的值变化，并发送给Java层
        }
    })
}
"""</span>
<span class="c1">// ... 初始化V8时 ...</span>
<span class="n">v8</span><span class="p">.</span><span class="nf">executeScript</span><span class="p">(</span><span class="nc">CREATE_PROXY_JS</span><span class="p">)</span>
</code></pre></div></div>

<p>这里我们声明一段JS代码，这里用于创建JS层的代理对象。在初始化V8时，将此段JS代码注入到V8环境中，当我们需要一个JS层代理对象时，就可以执行此JS函数<code class="language-plaintext highlighter-rouge">v8CreateProxy</code>创建一个JS层的代理对象。</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">fun</span> <span class="nf">createJSProxy</span><span class="p">(</span><span class="n">v8obj</span><span class="p">:</span> <span class="nc">V8Object</span><span class="p">):</span> <span class="nc">V8Object</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">v8</span><span class="p">.</span><span class="nf">executeObjectFunction</span><span class="p">(</span><span class="s">"v8CreateProxy"</span><span class="p">,</span> <span class="nc">V8Array</span><span class="p">(</span><span class="n">v8</span><span class="p">).</span><span class="nf">apply</span> <span class="p">{</span> <span class="nf">push</span><span class="p">(</span><span class="n">v8obj</span><span class="p">)</span> <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="22-封装">2.2 封装</h3>

<p>对以上基本逻辑进行封装，有关键类<strong>V8Binding</strong>、<strong>V8Manager</strong>、<strong>V8Field</strong>和<strong>V8Method</strong>。</p>

<h4 id="221-v8binding">2.2.1 V8Binding</h4>

<p>一个需要绑定的类，需要实现<strong>V8Binding</strong>接口。</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">V8Binding</span> <span class="p">{</span>
    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">TAG</span> <span class="p">=</span> <span class="s">"V8Binding"</span>
    <span class="p">}</span>
    <span class="c1">// V8Binding类的唯一id，用于将JS层对象与Java层对象进行一一对应</span>
    <span class="c1">// 默认实现为该对象的hashCodeo().toString()</span>
    <span class="k">fun</span> <span class="nf">getBindingId</span><span class="p">():</span> <span class="nc">String</span> <span class="p">{</span>  <span class="k">return</span> <span class="nf">hashCode</span><span class="p">().</span><span class="nf">toString</span><span class="p">()</span> <span class="p">}</span>
    <span class="c1">// 获取或者创建一个与其对应的代理V8Object</span>
    <span class="k">fun</span> <span class="nf">getMyBinding</span><span class="p">(</span><span class="n">v8</span><span class="p">:</span> <span class="nc">V8</span><span class="p">):</span> <span class="nc">V8Object</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nc">V8Manager</span><span class="p">.</span><span class="nf">obtain</span><span class="p">(</span><span class="n">v8</span><span class="p">).</span><span class="nf">run</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(!</span><span class="nf">isBound</span><span class="p">(</span><span class="nf">getBindingId</span><span class="p">()))</span> <span class="p">{</span>
                <span class="nf">createBinding</span><span class="p">(</span><span class="k">this</span><span class="nd">@V8Binding</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nf">getBinding</span><span class="p">(</span><span class="nf">getBindingId</span><span class="p">())</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// 没有绑定，但是仍然关心的属性，获取关心的属性名称</span>
    <span class="k">fun</span> <span class="nf">getCareForFieldKeys</span><span class="p">():</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nf">emptyArray</span><span class="p">()</span> <span class="p">}</span>
    <span class="c1">// 关心的属性值变更时</span>
    <span class="k">fun</span> <span class="nf">onCareForFieldChanged</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="n">newValue</span><span class="p">:</span> <span class="nc">Any</span><span class="p">?,</span> <span class="n">oldValue</span><span class="p">:</span> <span class="nc">Any</span><span class="p">?)</span> <span class="p">{}</span>

    <span class="c1">// 绑定的属性值由null变为非null值时触发，只针对非基本数据类型(数值与String)的属性触发</span>
    <span class="k">fun</span> <span class="nf">onBindingCreated</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nc">V8Object</span><span class="p">,</span> <span class="n">fieldInfo</span><span class="p">:</span> <span class="nc">Key</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nc">V8Object</span><span class="p">):</span> <span class="nc">V8Binding</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="s">"onCreateBinding must be implement when new binding created"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c1">// 绑定的属性值由非null变为null值时触发，只针对非基本数据类型(数值与String)的属性触发</span>
    <span class="k">fun</span> <span class="nf">onBindingDestroyed</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nc">V8Object</span><span class="p">,</span> <span class="n">fieldInfo</span><span class="p">:</span> <span class="nc">Key</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="s">"onBindingDestroyed must be implement when binding destroyed"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c1">// 绑定的属性值发生变化时触发</span>
    <span class="k">fun</span> <span class="nf">onBindingChanged</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nc">V8Object</span><span class="p">,</span> <span class="n">fieldInfo</span><span class="p">:</span> <span class="nc">Key</span><span class="p">,</span> <span class="n">newValue</span><span class="p">:</span> <span class="nc">Any</span><span class="p">?,</span> <span class="n">oldValue</span><span class="p">:</span> <span class="nc">Any</span><span class="p">?)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在<strong>getMyBinding</strong>方法中，我们使用V8Manager来创建或者获取一个与当前对象绑定的V8Object对象。</p>

<h4 id="222-v8manager">2.2.2 V8Manager</h4>

<p>V8Manager是一个针对某个V8环境的管理类，主要是用于维护JS层对象与Java层的绑定关系，执行创建绑定关系、删除绑定关系，分发属性变更事件等作用，J2V8Binding的主要核心逻辑的所在。</p>

<p>由于此处涉及到大量代码细节，故不在此罗列代码具体分析。</p>

<h4 id="223-v8field和v8method">2.2.3 V8Field和V8Method</h4>

<p>这两个类是注解类，用于标记类内属性和方法。</p>

<p><strong>@V8Field(binding=?)</strong>: 标记属性，其中有一个binding属性，标记此属性是否需要绑定，如果需要绑定，则会有事件回调，默认值为false。</p>

<p><strong>@V8Method(jsFuncName=?)</strong>: 标记方法，其中有一个jsFuncName属性，用于标识对应的JS函数的名称。</p>

<h3 id="23-基本使用方法">2.3 基本使用方法</h3>

<p>一个简单的示例类如下：</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">:</span> <span class="nc">V8Binding</span> <span class="p">{</span>
    <span class="c1">// 不需要绑定的属性，值会传递到对应的JS对象，但该值在JS层发生变化，Java层不会知道</span>
    <span class="nd">@V8Field</span>
    <span class="kd">val</span> <span class="py">name</span> <span class="p">=</span> <span class="s">"John"</span>
    <span class="c1">// 需要绑定的属性，初始值会传递到JS对象，该值在JS层发生变化，会传递到Java层</span>
    <span class="nd">@V8Field</span><span class="p">(</span><span class="n">binding</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
    <span class="kd">var</span> <span class="py">age</span> <span class="p">=</span> <span class="mi">15</span>

    <span class="c1">// 需要绑定的V8Binding类型属性，与之对应的V8Object会传递到JS对象，</span>
    <span class="c1">// 在JS层，如果变更为其他JS层内部的对象，会解绑之前的关系，与新的JS对象建立新的绑定关系</span>
    <span class="nd">@V8Binding</span><span class="p">(</span><span class="n">binding</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">location</span><span class="p">:</span> <span class="nc">V8Binding</span> <span class="p">=</span> <span class="o">..</span><span class="p">.</span>

    <span class="c1">// 在此方法中</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onBindingChanged</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nc">V8Object</span><span class="p">,</span> <span class="n">fieldInfo</span><span class="p">:</span> <span class="nc">Key</span><span class="p">,</span> <span class="n">newValue</span><span class="p">:</span> <span class="nc">Any</span><span class="p">?,</span> <span class="n">oldValue</span><span class="p">:</span> <span class="nc">Any</span><span class="p">?){</span>
        <span class="k">when</span><span class="p">(</span><span class="n">fieldInfo</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
            <span class="s">"age"</span> <span class="p">-&gt;</span> <span class="p">{}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nd">@V8Method</span><span class="p">(</span><span class="n">jsFuncName</span> <span class="p">=</span> <span class="s">"js层对应的名称，默认值与当前方法名一致"</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">sayHello</span><span class="p">(</span><span class="n">helloTo</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">getCareForFieldKeys</span><span class="p">():</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nf">arrayOf</span><span class="p">(</span><span class="s">"introduction"</span><span class="p">)</span> <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">onCareForFieldChanged</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="n">newValue</span><span class="p">:</span> <span class="nc">Any</span><span class="p">?,</span> <span class="n">oldValue</span><span class="p">:</span> <span class="nc">Any</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">when</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
            <span class="s">"introduction"</span> <span class="p">-&gt;</span> <span class="p">{}</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>当使用这个User类的一个对象user时候，可以按照如下方式使用。</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">v8</span> <span class="p">=</span> <span class="nc">V8</span><span class="p">.</span><span class="nf">createRuntime</span><span class="p">()</span>
<span class="kd">val</span> <span class="py">user</span> <span class="p">=</span> <span class="o">..</span><span class="p">.</span>
<span class="n">v8</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s">"user"</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="nf">getMyBinding</span><span class="p">(</span><span class="n">v8</span><span class="p">))</span>
</code></pre></div></div>

<p>这里，我们在JS环境中，增加了一个user变量。</p>

<p>然后在JS层，执行以下代码。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">;</span>    <span class="c1">// Java层不会感知到</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>        <span class="c1">// Java层可以在onBindingChanged感知到</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="p">{};</span>    <span class="c1">// Java层可以在onBindingChanged感知到，并解绑旧location值，与新值建立绑定关系</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">introduction</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hi</span><span class="dl">"</span><span class="p">;</span>    <span class="c1">// Java层可以在onCareForFieldChanged感知到</span>
</code></pre></div></div>

<p>在修改<code class="language-plaintext highlighter-rouge">name</code>属性时，由于此属性是被V8Field标记binding为false，则不会通知Java层此值的修改事件。</p>

<p>在修改<code class="language-plaintext highlighter-rouge">age</code>属性时，由于此值被V8Field标记binding为true，会通知Java层此值的修改事件。</p>

<p>在修改<code class="language-plaintext highlighter-rouge">location</code>属性时，虽然此值为一个对象，但是被V8Field标记binding为true，会通知Java层此值的修改事件。注意：用V8Field标记的对象类型，必须为V8可以接受的数据类型或者V8Binding类型。</p>

<p>在修改<code class="language-plaintext highlighter-rouge">introduction</code>时，虽然此值没有被V8Field标记，但是由于在getCareForFieldKeys返回的数组中，同样会有事件通知。</p>

<p>有了这种机制，小游戏开发中，就可以很方便的感知到绘制属性的变化。</p>

<h3 id="24-仍然存在的问题">2.4 仍然存在的问题</h3>

<p>目前仍然有一种问题是无法解决的，那就是数组中某个数据发生变化时，Java层是无法得知的。</p>

<p>如下代码：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">image</span> <span class="o">=</span> <span class="p">...;</span>
<span class="nx">image</span><span class="p">.</span><span class="nx">pixelBytes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 修改R值</span>
<span class="nx">image</span><span class="p">.</span><span class="nx">pixelBytes</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 修改G值</span>
<span class="nx">image</span><span class="p">.</span><span class="nx">pixelBytes</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 修改B值</span>
<span class="nx">image</span><span class="p">.</span><span class="nx">pixelBytes</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 修改A值</span>
</code></pre></div></div>

<p>目前这种场景较少，只在部分demo中见到直接修改图像像素数据的情况。</p>

<h2 id="三总结">三、总结</h2>

<p>以上代码片段只为展示逻辑主脉络，省略了大量细节，需要看细节部分，可以从<strong>V8Manager</strong>这里作为入口。源码链接：<a href="https://github.com/boybeak/v8x">v8x</a></p>]]></content><author><name>boybeak</name></author><category term="Android技巧" /><category term="Android" /><category term="J2V8" /><summary type="html"><![CDATA[不知道各位大神在工作中有没有用到过J2V8，简单介绍一下J2V8，这是谷歌开源的大名鼎鼎的JS执行引擎V8的java封装，旨在将V8引擎引入到java的开发项目中，这样就可以在java项目中执行js代码了。 为什么要使用这个库呢？因为我之前的工作是做SDK，这个SDK的一个核心功能就是作为JS的容器，将JS的代码在移动端跑起来，当然，WebView本身就可以执行JS代码，J2V8是作为高性能的替代引入的，目的是在运行JS游戏时更高效。]]></summary></entry><entry><title type="html">又要到饭了兄弟们</title><link href="/2025/03/24/%E5%8F%88%E8%A6%81%E5%88%B0%E9%A5%AD%E4%BA%86%E5%85%84%E5%BC%9F%E4%BB%AC.html" rel="alternate" type="text/html" title="又要到饭了兄弟们" /><published>2025-03-24T21:29:00+00:00</published><updated>2025-03-24T21:29:00+00:00</updated><id>/2025/03/24/%E5%8F%88%E8%A6%81%E5%88%B0%E9%A5%AD%E4%BA%86%E5%85%84%E5%BC%9F%E4%BB%AC</id><content type="html" xml:base="/2025/03/24/%E5%8F%88%E8%A6%81%E5%88%B0%E9%A5%AD%E4%BA%86%E5%85%84%E5%BC%9F%E4%BB%AC.html"><![CDATA[<p>我又要到饭了。用人话说就是又找到工作了，当牛马了。
为期一年的独立开发尝试结束了，还好找到工作也比较快。
但是我一点都不开心，实际上我已经上班有快一个月了，我时常怀念过去一年自由的日志。那时候，天天陪着老婆，偶尔出去乱走，在家的时候就写一些自己想写的代码，陪老婆考完了驾照，父亲得急性阑尾炎，也正好可以在医院陪床，唯一比较遗憾的是，没有在这段时间内，和老婆一起补拍一下婚纱照。
最让我们惊喜的是，在25年初，老婆检查出怀孕了，我们即将拥有自己的孩子了。
新工作在某小有名气的出海公司，但是工作并不开心，十几年的老代码，要在上边不断的屎上雕花。</p>]]></content><author><name>boybeak</name></author><category term="要饭" /><summary type="html"><![CDATA[我又要到饭了。用人话说就是又找到工作了，当牛马了。 为期一年的独立开发尝试结束了，还好找到工作也比较快。 但是我一点都不开心，实际上我已经上班有快一个月了，我时常怀念过去一年自由的日志。那时候，天天陪着老婆，偶尔出去乱走，在家的时候就写一些自己想写的代码，陪老婆考完了驾照，父亲得急性阑尾炎，也正好可以在医院陪床，唯一比较遗憾的是，没有在这段时间内，和老婆一起补拍一下婚纱照。 最让我们惊喜的是，在25年初，老婆检查出怀孕了，我们即将拥有自己的孩子了。 新工作在某小有名气的出海公司，但是工作并不开心，十几年的老代码，要在上边不断的屎上雕花。]]></summary></entry><entry><title type="html">为你的Github repo生成好看的preview</title><link href="/2024/12/07/BannerDog-%E7%94%9F%E6%88%90Github%E4%BB%93%E5%BA%93Banner%E5%9B%BE.html" rel="alternate" type="text/html" title="为你的Github repo生成好看的preview" /><published>2024-12-07T22:35:00+00:00</published><updated>2024-12-07T22:35:00+00:00</updated><id>/2024/12/07/BannerDog-%E7%94%9F%E6%88%90Github%E4%BB%93%E5%BA%93Banner%E5%9B%BE</id><content type="html" xml:base="/2024/12/07/BannerDog-%E7%94%9F%E6%88%90Github%E4%BB%93%E5%BA%93Banner%E5%9B%BE.html"><![CDATA[<p>在手机上使用Github app，看到信息流中，有些repo的动态会有一个preview图。
<!-- more -->
<img src="/assets/images/BannerDog-repo.png" alt="BannerDog-repo" /></p>

<p>这个图是在哪里设置的呢？
找一个自己的Github仓库，然后进入<strong>Settings</strong> -&gt; <strong>Social Preview</strong>，上传一个图就可以了。
但是对于大多数人来说，做这个一个图还是有些许门槛的，何况要想显示最佳效果，还有尺寸和内边距的要求。为了解决这个问题，其实也是为了我自己的repo能够有一个漂亮的图片，我写了这样的一个小网站——<a href="https://banner-dog.vercel.app/">BannerDog</a>。</p>

<p><img src="/assets/images/capture-banner-dog.png" alt="website-capture" /></p>

<p>其中集合了若干比较好看的模板，比如这个：</p>

<p><img src="/assets/images/Tray-banner.png" alt="TrayBanner" /></p>

<p>欢迎访问：<strong><a href="https://banner-dog.fun/">BannerDog</a></strong></p>]]></content><author><name>boybeak</name></author><category term="Github" /><summary type="html"><![CDATA[在手机上使用Github app，看到信息流中，有些repo的动态会有一个preview图。]]></summary></entry><entry><title type="html">可能是软键盘状态与高度监听最佳方案</title><link href="/android%E6%8A%80%E5%B7%A7/2024/12/03/%E5%8F%AF%E8%83%BD%E6%98%AF%E8%BD%AF%E9%94%AE%E7%9B%98%E7%8A%B6%E6%80%81%E4%B8%8E%E9%AB%98%E5%BA%A6%E7%9B%91%E5%90%AC%E6%9C%80%E4%BD%B3%E6%96%B9%E6%A1%88.html" rel="alternate" type="text/html" title="可能是软键盘状态与高度监听最佳方案" /><published>2024-12-03T16:13:00+00:00</published><updated>2024-12-03T16:13:00+00:00</updated><id>/android%E6%8A%80%E5%B7%A7/2024/12/03/%E5%8F%AF%E8%83%BD%E6%98%AF%E8%BD%AF%E9%94%AE%E7%9B%98%E7%8A%B6%E6%80%81%E4%B8%8E%E9%AB%98%E5%BA%A6%E7%9B%91%E5%90%AC%E6%9C%80%E4%BD%B3%E6%96%B9%E6%A1%88</id><content type="html" xml:base="/android%E6%8A%80%E5%B7%A7/2024/12/03/%E5%8F%AF%E8%83%BD%E6%98%AF%E8%BD%AF%E9%94%AE%E7%9B%98%E7%8A%B6%E6%80%81%E4%B8%8E%E9%AB%98%E5%BA%A6%E7%9B%91%E5%90%AC%E6%9C%80%E4%BD%B3%E6%96%B9%E6%A1%88.html"><![CDATA[<p>之前写过一个监听Android系统软键盘高度的解决方案——<a href="https://boybeak.github.io/android%E6%8A%80%E5%B7%A7/2023/07/29/%E8%BD%AF%E9%94%AE%E7%9B%98%E9%AB%98%E5%BA%A6%E7%9B%91%E6%B5%8B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html">软键盘高度监测最佳实践</a>，今天将这个方案加以改进，写成了一个库——<a href="https://github.com/boybeak/skb-global">skb-global</a>。</p>

<!-- more -->

<p><img src="/assets/images/skb-global.gif" alt="gif" /></p>

<h2 id="一安装">一、安装</h2>
<p>该库托管于<strong>jitpack</strong>，所以在使用前，请先引入<strong>jitpack</strong>。</p>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencyResolutionManagement</span> <span class="o">{</span>
    <span class="n">repositoriesMode</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">RepositoriesMode</span><span class="o">.</span><span class="na">FAIL_ON_PROJECT_REPOS</span><span class="o">)</span>
    <span class="n">repositories</span> <span class="o">{</span>
        <span class="n">mavenCentral</span><span class="o">()</span>
        <span class="n">maven</span> <span class="o">{</span> <span class="n">url</span> <span class="s1">'https://jitpack.io'</span> <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>然后添加依赖。</p>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">implementation</span> <span class="s1">'com.github.boybeak:skb-global:Tag'</span>
<span class="o">}</span>
</code></pre></div></div>
<p>最新版本为：<img src="https://jitpack.io/v/boybeak/skb-global.svg" alt="version" /></p>

<h2 id="二使用">二、使用</h2>
<p>有两种使用方式：<strong>全局</strong>和<strong>局部</strong>。</p>

<h3 id="21-全局使用">2.1 全局使用</h3>
<p>在使用前，需要先在Application中初始化<code class="language-plaintext highlighter-rouge">SoftKeyboardGlobal</code>。</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">App</span> <span class="p">:</span> <span class="nc">Application</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">()</span>
        <span class="nc">SoftKeyboardGlobal</span><span class="p">.</span><span class="nf">install</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<blockquote>
  <p>其中，第二个参数传入<code class="language-plaintext highlighter-rouge">true</code>，可以在UI界面显示一个高度指示器。</p>
</blockquote>

<p>然后，在你应用中的任意位置，可以监听键盘的状态与高度，如下方式：</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SoftKeyboardGlobal</span><span class="p">.</span><span class="nf">addSoftKeyboardCallback</span><span class="p">(</span><span class="kd">object</span> <span class="err">: </span><span class="nc">SoftKeyboardGlobal</span><span class="p">.</span><span class="nc">SoftKeyboardCallback</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onOpen</span><span class="p">(</span><span class="n">height</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"onOpen height=$height"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onClose</span><span class="p">()</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"onClose"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onHeightChanged</span><span class="p">(</span><span class="n">height</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"onHeightChanged height=$height"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<h3 id="22-局部使用">2.2 局部使用</h3>
<p>你可以在任意<code class="language-plaintext highlighter-rouge">Activity</code>, <code class="language-plaintext highlighter-rouge">Fragment</code>或者<code class="language-plaintext highlighter-rouge">View</code>中使用这种方式，只要能获取到<code class="language-plaintext highlighter-rouge">Activity</code>实例。以<code class="language-plaintext highlighter-rouge">Activity</code>为例，如下方式：</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">observer</span> <span class="k">by</span> <span class="nf">lazy</span> <span class="p">{</span> <span class="nc">KeyboardObserver</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">true</span><span class="p">)</span> <span class="p">}</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">switchBtn</span><span class="p">:</span> <span class="nc">SwitchCompat</span> <span class="k">by</span> <span class="nf">lazy</span> <span class="p">{</span> <span class="nf">findViewById</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">switchBtn</span><span class="p">)</span> <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
        <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>

        <span class="n">switchBtn</span><span class="p">.</span><span class="nf">setOnCheckedChangeListener</span> <span class="p">{</span> <span class="n">buttonView</span><span class="p">,</span> <span class="n">isChecked</span> <span class="p">-&gt;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">isChecked</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">observer</span><span class="p">.</span><span class="nf">watch</span><span class="p">()</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">observer</span><span class="p">.</span><span class="nf">unwatch</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>同样的，在创建<code class="language-plaintext highlighter-rouge">KeyboardObserver</code>时，第二个参数传入<code class="language-plaintext highlighter-rouge">true</code>可以显示一个键盘高度指示器，方便调试。</p>

<h2 id="三原理分析">三、原理分析</h2>
<p>该方案是在多年开发过程中，实践出来的最佳的方案。以前的旧方案，实现方式如下：</p>
<ol>
  <li>在界面中放置一个测量布局，然后监听布局变化，但是布局尺寸变化，有可能会执行多次，很难判断键盘的高度是什么时候停止变化的；</li>
  <li>为了解决这个问题，我放置了一个延迟触发任务，只要布局变化就取消上一个任务，并且布置一个新的延迟任务，等到布局不再发生变化，就会存留最后一个放置的任务被触发了，再获取测量布局高度，计算与总高度的差值。</li>
</ol>

<p>这种旧方案的缺点很多，比如：</p>
<ol>
  <li>侵入性，必须在布局中显式的放置测量布局；</li>
  <li>滞后性，测量时机上延迟的，并不能在布局稳定的第一时间获取到键盘的高度；</li>
  <li>误触性，由于获取键盘高度靠延迟任务，延迟的时间太长，则导致滞后性太严重，太短，则可能来不及取消上一个任务，测量高度就被错误触发；</li>
  <li>不定性，由于设备可能会有横竖屏幕切换，因横竖屏切换导致的测量布局尺寸发生变化进而触发键盘高度事件，这个是不可接受的。</li>
</ol>

<p>为了解决这些问题，进而开发出这个方案，简单阐述一下原理。
新的方案使用了两个隐藏的<code class="language-plaintext highlighter-rouge">PopupWindow</code>，一个用于测量屏幕的总高度，称为Ruler——尺子，另外一个用于跟随软键盘的弹起/收回而进行伸缩，称为Cursor——游标。
这样做，可以避免侵入。</p>
<ol>
  <li>低侵入性，只需要调用watch与unwatch即可；</li>
  <li>无滞后性，由于不采用延迟任务的方式，所以没有滞后性；</li>
  <li>无误触性，同样是因为没有采用延迟任务的方式，所以没有误触性；</li>
  <li>稳定性，由于采用的是双布局的差值比较，所以不会因为横竖屏幕切换导致的触发键盘高度事件；</li>
</ol>

<p>想要更多细节，请查看代码：<a href="https://github.com/boybeak/skb-global">skb-global</a>。</p>]]></content><author><name>boybeak</name></author><category term="Android技巧" /><category term="Android" /><summary type="html"><![CDATA[之前写过一个监听Android系统软键盘高度的解决方案——软键盘高度监测最佳实践，今天将这个方案加以改进，写成了一个库——skb-global。]]></summary></entry><entry><title type="html">我写了一个Jekyll的Material Design的主题</title><link href="/2024/11/25/%E6%88%91%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAJekyll%E7%9A%84Material-Design%E7%9A%84%E4%B8%BB%E9%A2%98.html" rel="alternate" type="text/html" title="我写了一个Jekyll的Material Design的主题" /><published>2024-11-25T17:41:32+00:00</published><updated>2024-11-25T17:41:32+00:00</updated><id>/2024/11/25/%E6%88%91%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAJekyll%E7%9A%84Material-Design%E7%9A%84%E4%B8%BB%E9%A2%98</id><content type="html" xml:base="/2024/11/25/%E6%88%91%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAJekyll%E7%9A%84Material-Design%E7%9A%84%E4%B8%BB%E9%A2%98.html"><![CDATA[<p>使用了很久的Hexo作为博客模板引擎，最近出了一些莫名其妙的问题，简单来说，就是部署在github pages的博客，在没有修改任何环境变量的前提下，突然就无法执行任何构建了，报出版本号的一系列问题，尝试修复无果，最终选择切换回老牌博客模板引擎Jekyll。</p>

<!-- more -->

<p>其实，Hexo还是挺不错的，Node驱动，对于相比Jekyll的Ruby还是要更常用一些。但是Github pages对Jekyll支持还是更友好一些。</p>

<p>作为一个Android开发者，对于Material Design更为熟悉，也比较喜欢这种简洁的风格，以前曾尝试过他人写的类似风格主题，但是总觉得不是自己想要的，这次就“票友起义”，自己来搞一个Material Design的Jekyll主题。</p>

<p>该主题的名称为<strong>Sobekyll</strong>，因为是基于<a href="https://soberjs.com/">SoberJS</a>这个框架，为Jekyll所写，故得名。</p>

<p>主题地址: <a href="https://sobekyll.github.io/">Sobekyll</a></p>

<p>开源地址: <a href="https://github.com/sobekyll/sobekyll.github.io">Sobekyll</a>。</p>]]></content><author><name>boybeak</name></author><category term="Jekyll" /><category term="Material Design" /><summary type="html"><![CDATA[使用了很久的Hexo作为博客模板引擎，最近出了一些莫名其妙的问题，简单来说，就是部署在github pages的博客，在没有修改任何环境变量的前提下，突然就无法执行任何构建了，报出版本号的一系列问题，尝试修复无果，最终选择切换回老牌博客模板引擎Jekyll。]]></summary></entry><entry><title type="html">我写了一个app——AOD Volume</title><link href="/2024/11/24/AOD-Volume.html" rel="alternate" type="text/html" title="我写了一个app——AOD Volume" /><published>2024-11-24T17:41:32+00:00</published><updated>2024-11-24T17:41:32+00:00</updated><id>/2024/11/24/AOD-Volume</id><content type="html" xml:base="/2024/11/24/AOD-Volume.html"><![CDATA[<p>使用手机时，经常因为忘记之前音量调得过大，在播放视频/音乐时，造成音量过大的尴尬或者吵醒别人。因此，我写了一个常显音量条，用来时刻提醒自己音量，避免音量过大的尴尬。
<a href="https://play.google.com/store/apps/details?id=com.github.boybeak.aodvolumebar" target="_blank">
<img src="/assets/images/googleplay-badge.webp" width="200" />
</a></p>

<p><img src="/assets/images/aod-volume.png" alt="aod-volume" width="320" /></p>

<video width="320" controls="" autoplay="">
  <source src="/assets/videos/aod-volume-fg-service.webm" type="video/webm" />
  您的浏览器不支持 video 标签。
</video>]]></content><author><name>boybeak</name></author><category term="Android" /><summary type="html"><![CDATA[使用手机时，经常因为忘记之前音量调得过大，在播放视频/音乐时，造成音量过大的尴尬或者吵醒别人。因此，我写了一个常显音量条，用来时刻提醒自己音量，避免音量过大的尴尬。]]></summary></entry><entry><title type="html">写了一个Hexo主题与插件</title><link href="/2024/09/22/%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAHexo%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%8F%92%E4%BB%B6.html" rel="alternate" type="text/html" title="写了一个Hexo主题与插件" /><published>2024-09-22T17:41:32+00:00</published><updated>2024-09-22T17:41:32+00:00</updated><id>/2024/09/22/%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAHexo%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%8F%92%E4%BB%B6</id><content type="html" xml:base="/2024/09/22/%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAHexo%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%8F%92%E4%BB%B6.html"><![CDATA[<p>最近写了一个Hexo的主题，同时为了配合主题<a href="https://github.com/hexober/hexober.github.io">Hexober</a>，写了一个插件<a href="https://github.com/boybeak/hexo-auto-photos">hexo-auto-photos</a>。</p>

<h2 id="hexober">Hexober</h2>
<p><a href="https://github.com/hexober/hexober.github.io">Hexober</a>是一个基于<a href="https://soberjs.com/">soberJS</a>的Material Design风格的Hexo主题。本博客即将切换到该主题下。</p>

<h2 id="hexo-auto-photos">hexo-auto-photos</h2>
<p><a href="https://github.com/boybeak/hexo-auto-photos">hexo-auto-photos</a>是一个自动从文章内容中，提取出photos字段的库，该库可配合<a href="https://github.com/hexober/hexober.github.io">Hexober</a>或者其它支持文章列表展示图片的主题使用。当使用该库以后，如果用户没有指定文章的photos字段，将会自动从文章中找到图片部分，并填充到文章的photos字段中。</p>]]></content><author><name>boybeak</name></author><category term="Hexo" /><summary type="html"><![CDATA[最近写了一个Hexo的主题，同时为了配合主题Hexober，写了一个插件hexo-auto-photos。]]></summary></entry><entry><title type="html">面试笔记</title><link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/2024/06/16/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%931.html" rel="alternate" type="text/html" title="面试笔记" /><published>2024-06-16T17:03:00+00:00</published><updated>2024-06-16T17:03:00+00:00</updated><id>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/2024/06/16/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%931</id><content type="html" xml:base="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/2024/06/16/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%931.html"><![CDATA[<p>边独立，边面试，两手都要抓，两手都要硬。</p>
<h3 id="1-给定数组array与一个数字num要求从array中找出两个数其和为num并返回这两个数的下标">1. 给定数组array与一个数字num，要求从array中找出两个数，其和为num，并返回这两个数的下标</h3>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">findTwoSum</span><span class="p">(</span><span class="n">array</span><span class="p">:</span> <span class="nc">IntArray</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="nc">Int</span><span class="p">):</span> <span class="nc">Pair</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">,</span> <span class="nc">Int</span><span class="p">&gt;?</span> <span class="p">{</span>
    <span class="c1">// 创建一个哈希表来存储数组中的数字及其索引</span>
    <span class="kd">val</span> <span class="py">map</span> <span class="p">=</span> <span class="n">mutableMapOf</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">,</span> <span class="nc">Int</span><span class="p">&gt;()</span>

    <span class="c1">// 遍历数组</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="n">array</span><span class="p">.</span><span class="n">indices</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">complement</span> <span class="p">=</span> <span class="n">num</span> <span class="p">-</span> <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

        <span class="c1">// 检查哈希表中是否存在这个补数</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">map</span><span class="p">.</span><span class="nf">containsKey</span><span class="p">(</span><span class="n">complement</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// 如果存在，返回这个数及其补数的索引</span>
            <span class="k">return</span> <span class="nc">Pair</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">complement</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="c1">// 将当前数字及其索引存入哈希表</span>
        <span class="n">map</span><span class="p">[</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="p">=</span> <span class="n">i</span>
    <span class="p">}</span>

    <span class="c1">// 如果没有找到符合条件的数对，返回null</span>
    <span class="k">return</span> <span class="k">null</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>解读：</strong></p>
<ol>
  <li>创建一个map，在遍历的过程中，报错所有数字以及其对应的坐标，数字为键，坐标为值；</li>
  <li>遍历时，计算出num与当前元素的差值，然后试图从map中索引，如果有索引，则命中，如果没有则继续遍历；</li>
  <li>map的作用，相当于取代了双层遍历法其中的一层遍历；</li>
</ol>

<h3 id="2-jvm如何判断一个对象可以被回收">2. jvm如何判断一个对象可以被回收？</h3>
<ol>
  <li>引用计数法
优点：实现简单，时间复杂度低；
缺点：无法解决循环引用问题；</li>
  <li>可达性分析算法
通过GC Roots开始标记所有可达的对象；可以被标记的，认为是活的对象，未被标记的，则认为已经不需要，可以被回收；</li>
</ol>

<h4 id="21-有哪些可以作为gc-root">2.1 有哪些可以作为GC Root?</h4>
<ul>
  <li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li>
  <li>方法区中的类静态属性引用的对象。</li>
  <li>方法区中常量引用的对象。</li>
  <li>本地方法栈中JNI（即Native方法）引用的对象。</li>
</ul>

<h4 id="22-垃圾回收的过程是怎样的">2.2 垃圾回收的过程是怎样的？</h4>
<p>有三种策略：</p>
<ul>
  <li>标记清除：首先标记所有可达对象，然后清除所有未被标记的对象；</li>
  <li>复制算法：将存活的对象，从一块内存复制到另外一块内存，然后清空原来的内存；</li>
  <li>标记-压缩： 首先标记所有可达的对象，然后将所有存活的对象压缩到内存的一端，清除便捷以外的空间；</li>
</ul>

<h3 id="3-android的handler是如何造成内存泄露的">3. Android的Handler是如何造成内存泄露的？</h3>
<p>非静态内部类或者匿名内部类，会隐式的持有外部类的对象，如果在Activity中声明一个Handler，而Handler执行延迟任务，在任务结束前，Activity已经被销毁了，则Activiey泄露了；</p>

<h4 id="31-如何解决handler的内存泄露">3.1 如何解决Handler的内存泄露？</h4>
<ol>
  <li>将<code class="language-plaintext highlighter-rouge">Handler</code>声明为静态内部类，并且使用弱引用持有外部类的引用；</li>
  <li>在Activity的onDestroy中，使用<code class="language-plaintext highlighter-rouge">Handler</code>的<code class="language-plaintext highlighter-rouge">removeCallbacksAndMessages</code>方法，移除所有未执行的消息和回调；</li>
</ol>

<h4 id="32-有没有非activity的其他内存泄露的场景">3.2 有没有非Activity的其他内存泄露的场景？</h4>
<ol>
  <li>单例持有外部对象；</li>
  <li>静态持有外部对象；</li>
  <li>未取消注册监听器或者回调；</li>
  <li>WebView导致内存泄露；</li>
  <li>异步任务；
 总结来说，就是生命周期长的对象，持有了一个生命周期短的对象的引用；</li>
</ol>

<h3 id="4-应用启动白屏如何排查如何解决">4. 应用启动白屏如何排查？如何解决？</h3>
<ol>
  <li>在应用入口，比如Application的onCreate、启动Activity的onCreate中，做耗时检查，如果耗时异常，具体检查代码；</li>
  <li>如果是Activity的onCreate中耗时长，检查是否为布局过于复杂，造成的布局解析耗时长，可以使用异步布局处理；</li>
  <li>如果为系统机制问题导致，可以配置主题或者使用Splash库来做过渡；</li>
</ol>

<h3 id="5-线上问题如何排查">5. 线上问题如何排查？</h3>
<ol>
  <li>运营种子用户，提前内测，按照用户反馈，复现问题场景；</li>
  <li>集成bugly等线上日志抓取工具，按照机型、系统等信息，复现问题场景；</li>
  <li>如果有可能，可以通过热更新修复问题；</li>
</ol>

<h3 id="6-不同任务类型io密集型计算密集型任务如何分配线程池策略">6. 不同任务类型(IO密集型/计算密集型)任务，如何分配线程池策略？</h3>
<h4 id="io密集型任务">IO密集型任务</h4>
<p><strong>特点</strong>
IO密集型任务主要涉及等待外部资源（如文件系统、网络请求、数据库操作等），因此大部分时间处于等待状态，而非消耗CPU。</p>

<p><strong>策略</strong>
对于IO密集型任务，可以使用较大的线程池，因为线程在等待IO操作完成时不会消耗大量CPU资源。</p>

<p><strong>线程池配置</strong>
通常，线程池的大小可以设置为CPU核心数的2倍或更多。一个常见的公式是：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>线程池大小 <span class="o">=</span> CPU核心数 <span class="k">*</span> 2
或更大，根据实际情况调整。
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">IOIntensiveTaskExample</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">N_THREADS</span> <span class="o">=</span> <span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">()</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ExecutorService</span> <span class="n">ioThreadPool</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="no">N_THREADS</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">ioThreadPool</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="c1">// 模拟IO操作</span>
                <span class="n">performIOOperation</span><span class="o">();</span>
            <span class="o">});</span>
        <span class="o">}</span>

        <span class="n">ioThreadPool</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">performIOOperation</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// 模拟IO操作</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">interrupt</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="计算密集型任务">计算密集型任务</h4>
<p><strong>特点</strong>
计算密集型任务主要消耗CPU资源，执行过程中几乎不涉及等待时间，因此可以充分利用CPU。</p>

<p><strong>策略</strong>
对于计算密集型任务，线程池的大小应设置为接近CPU核心数。过多的线程会导致频繁的上下文切换，反而降低性能。</p>

<p><strong>线程池配置</strong>
通常，线程池的大小可以设置为CPU核心数。一个常见的公式是：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>线程池大小 <span class="o">=</span> CPU核心数
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CPUIntensiveTaskExample</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">N_THREADS</span> <span class="o">=</span> <span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ExecutorService</span> <span class="n">cpuThreadPool</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="no">N_THREADS</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">cpuThreadPool</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="c1">// 模拟计算操作</span>
                <span class="n">performCPUTask</span><span class="o">();</span>
            <span class="o">});</span>
        <span class="o">}</span>

        <span class="n">cpuThreadPool</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">performCPUTask</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 模拟计算操作</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>混合任务</strong>
在实际应用中，有些任务可能既包含IO操作又包含计算操作。这种情况下，可以考虑使用不同的线程池分别处理不同类型的任务，或者根据任务的主要特征选择适当的线程池配置。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MixedTaskExample</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">IO_THREADS</span> <span class="o">=</span> <span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">()</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">CPU_THREADS</span> <span class="o">=</span> <span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ExecutorService</span> <span class="n">ioThreadPool</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="no">IO_THREADS</span><span class="o">);</span>
        <span class="nc">ExecutorService</span> <span class="n">cpuThreadPool</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="no">CPU_THREADS</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">ioThreadPool</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="c1">// 模拟IO操作</span>
                <span class="n">performIOOperation</span><span class="o">();</span>
            <span class="o">});</span>

            <span class="n">cpuThreadPool</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="c1">// 模拟计算操作</span>
                <span class="n">performCPUTask</span><span class="o">();</span>
            <span class="o">});</span>
        <span class="o">}</span>

        <span class="n">ioThreadPool</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
        <span class="n">cpuThreadPool</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">performIOOperation</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// 模拟IO操作</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">interrupt</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">performCPUTask</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 模拟计算操作</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h4 id="总结">总结</h4>
<p><strong>IO密集型任务</strong>：使用较大的线程池，通常为CPU核心数的2倍或更多，以应对大量的IO等待时间。
<strong>计算密集型任务</strong>：使用较小的线程池，接近CPU核心数，以充分利用CPU资源，避免过多的线程上下文切换。
<strong>混合任务</strong>：根据任务的主要特征，分别使用不同的线程池处理IO操作和计算操作。
通过合理配置线程池，可以有效提高应用程序的性能和资源利用率。</p>]]></content><author><name>boybeak</name></author><category term="面试笔记" /><category term="面试" /><summary type="html"><![CDATA[边独立，边面试，两手都要抓，两手都要硬。 1. 给定数组array与一个数字num，要求从array中找出两个数，其和为num，并返回这两个数的下标 ```kotlin fun findTwoSum(array: IntArray, num: Int): Pair&lt;Int, Int&gt;? { // 创建一个哈希表来存储数组中的数字及其索引 val map = mutableMapOf&lt;Int, Int&gt;()]]></summary></entry><entry><title type="html">Tray - macOS菜单栏app开发库</title><link href="/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/2024/06/14/Tray-macOS%E8%8F%9C%E5%8D%95%E6%A0%8Fapp%E5%BC%80%E5%8F%91%E5%BA%93.html" rel="alternate" type="text/html" title="Tray - macOS菜单栏app开发库" /><published>2024-06-14T15:15:00+00:00</published><updated>2024-06-14T15:15:00+00:00</updated><id>/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/2024/06/14/Tray-macOS%E8%8F%9C%E5%8D%95%E6%A0%8Fapp%E5%BC%80%E5%8F%91%E5%BA%93</id><content type="html" xml:base="/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/2024/06/14/Tray-macOS%E8%8F%9C%E5%8D%95%E6%A0%8Fapp%E5%BC%80%E5%8F%91%E5%BA%93.html"><![CDATA[<p>最近开发了<a href="https://github.com/boybeak/JustTodo">JustTodo</a>和<a href="https://github.com/boybeak/DeskNote">DeskNote</a>两个macOS应用，都是启动入口在菜单栏的，通过菜单栏上图标点击，快速执行相关操作，这让我想起我开发第一款菜单栏app <a href="https://github.com/boybeak/TranslatorDocs">Translator</a>时的痛苦。因为想使用最新的SwiftUI作为UI框架，但是此框架构建菜单栏app的资料很少，大多数都是生成一个简单菜单，而不是可以自定义的复杂界面，尤其是用swiftUI构建的界面。
为了解决这一痛点，在总结了<a href="https://github.com/boybeak/JustTodo">JustTodo</a>和<a href="https://github.com/boybeak/DeskNote">DeskNote</a>两个macOS应用开发经验后，决心自己做了一个菜单栏应用快捷库<a href="https://github.com/boybeak/Tray">Tray</a>，方便以后使用。</p>

<h2 id="一引入">一、引入</h2>
<p>在macOS项目中，点击<strong>File</strong> -&gt; <strong>Add Package Dependencies …</strong>，在包管理窗口的搜索框中，复制粘贴<code class="language-plaintext highlighter-rouge">https://github.com/boybeak/Tray.git</code>，待检索到库信息，点击<strong>Add Package</strong>按钮。</p>

<h2 id="二使用">二、使用</h2>
<p>以SwiftUI应用为例，在代码入口处，声明一个<code class="language-plaintext highlighter-rouge">AppDelegate</code>.</p>

<h3 id="21-初始化">2.1 初始化</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@main</span>
<span class="kd">struct</span> <span class="kt">DeskNoteApp</span><span class="p">:</span> <span class="kt">App</span> <span class="p">{</span>

    <span class="kd">@NSApplicationDelegateAdaptor</span><span class="p">(</span><span class="kt">AppDelegate</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="k">var</span> <span class="nv">app</span><span class="p">:</span> <span class="kt">AppDelegate</span>

    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">Scene</span> <span class="p">{</span>
        <span class="kt">Settings</span> <span class="p">{}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<blockquote>
  <p>这里body中的<code class="language-plaintext highlighter-rouge">Settings {}</code>代码，是为了隐藏启动时的主窗口。</p>
</blockquote>

<p>然后创建AppDelegate类。</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">AppDelegate</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">NSApplicationDelegate</span> <span class="p">{</span>

    <span class="kd">private</span> <span class="k">var</span> <span class="nv">tray</span><span class="p">:</span> <span class="kt">Tray</span><span class="o">!</span>
    
    <span class="kd">func</span> <span class="nf">applicationDidFinishLaunching</span><span class="p">(</span><span class="n">_</span> <span class="nv">notification</span><span class="p">:</span> <span class="kt">Notification</span><span class="p">)</span> <span class="p">{</span>

        <span class="n">tray</span> <span class="o">=</span> <span class="kt">Tray</span><span class="o">.</span><span class="nf">install</span><span class="p">(</span><span class="nv">named</span><span class="p">:</span> <span class="s">"TrayIcon"</span><span class="p">)</span> <span class="p">{</span> <span class="n">tray</span> <span class="k">in</span> 
            <span class="k">self</span><span class="o">.</span><span class="nf">configTray</span><span class="p">(</span><span class="nv">tray</span><span class="p">:</span> <span class="n">tray</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>引入相关的类Tray并声明我们的托盘管理对象<code class="language-plaintext highlighter-rouge">var tray: Tray</code>，并在<code class="language-plaintext highlighter-rouge">applicationDidFinishLaunching</code>中为改对象赋值，传入资源文件名称，或者使用<code class="language-plaintext highlighter-rouge">SF Symbols</code>也可以，只是参数名要改为systemSymbolName，如果有更多要求，也可以直接以icon为参数名，传入一个NSImage对象。
然后在闭包中配置tray.</p>

<h3 id="22-配置托盘信息">2.2 配置托盘信息</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">configTray</span><span class="p">(</span><span class="nv">tray</span><span class="p">:</span> <span class="kt">Tray</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 配置左键弹出view</span>
    <span class="n">tray</span><span class="o">.</span><span class="nf">setView</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="kt">ContentView</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这里设置的是一个SwiftUI的View，你也可以设置NSView或者NSViewController，除了界面参数，还有其他三个可选参数：</p>
<ol>
  <li>behavior: NSPopover的behavior，默认值为.transient，即点击窗口以外区域隐藏弹出界面；</li>
  <li>level: NSPopover的窗口层级，默认为.floating；</li>
  <li>size: NSPopover的大小，默认为nil，即使用View自己配置的大小；</li>
</ol>

<p>在JustTodo应用中，其效果如下图：
<img src="/assets/images/just-todo.gif" alt="" /></p>

<p>到这里，主要的配置就完成了，如果你不想弹出一个NSPopover，你也可以接管托盘图标的左键事件。</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tray</span><span class="o">.</span><span class="n">setOnLeftClick</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre></div></div>
<p>返回true，表示事件完全处理，会阻止默认行为。默认行为就是弹出NSPopover，前提是设置了view。比如在DeskNote中，我接管了此事件，改为弹出笔记的编辑页面。
<img src="/assets/images/dest-note.gif" alt="" />
当然，同样你也可以为右键增加事件。</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tray</span><span class="o">.</span><span class="n">setOnRightClick</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre></div></div>
<p>返回true，表示事件完成处理，阻止默认行为。默认行为是弹出菜单，前提是设置了菜单，正如下边代码。</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">menu</span> <span class="o">=</span> <span class="kt">NSMenu</span><span class="p">()</span>
        
<span class="k">let</span> <span class="nv">newNoteMenuItem</span> <span class="o">=</span> <span class="kt">NSMenuItem</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">NSLocalizedString</span><span class="p">(</span><span class="s">"Menu_item_new_note"</span><span class="p">,</span> <span class="nv">comment</span><span class="p">:</span> <span class="s">""</span><span class="p">),</span> <span class="nv">action</span><span class="p">:</span> <span class="kd">#selector(</span><span class="nf">onNewNoteAction</span><span class="kd">)</span><span class="p">,</span> <span class="nv">keyEquivalent</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">quitMenuItem</span> <span class="o">=</span> <span class="kt">NSMenuItem</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">NSLocalizedString</span><span class="p">(</span><span class="s">"Menu_item_quit"</span><span class="p">,</span> <span class="nv">comment</span><span class="p">:</span> <span class="s">""</span><span class="p">),</span> <span class="nv">action</span><span class="p">:</span> <span class="kd">#selector(</span><span class="nf">onQuitAction</span><span class="kd">)</span><span class="p">,</span> <span class="nv">keyEquivalent</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>

<span class="n">menu</span><span class="o">.</span><span class="nf">addItem</span><span class="p">(</span><span class="n">newNoteMenuItem</span><span class="p">)</span>
<span class="n">menu</span><span class="o">.</span><span class="nf">addItem</span><span class="p">(</span><span class="n">quitMenuItem</span><span class="p">)</span>

<span class="n">tray</span><span class="o">.</span><span class="nf">setMenu</span><span class="p">(</span><span class="nv">menu</span><span class="p">:</span> <span class="n">menu</span><span class="p">)</span>
</code></pre></div></div>
<p>效果如下：
<img src="/assets/images/dest-note-right.gif" alt="" /></p>

<p>这就是一些基本的使用和配置步骤。接下来是一些相关的小建议。</p>

<h2 id="三建议">三、建议</h2>
<h3 id="31-托盘图标尺寸">3.1 托盘图标尺寸</h3>
<p>1x: 18<em>18
2x: 36</em>36
3x: 54*54</p>

<h3 id="32-隐藏docker栏中应用的图标">3.2 隐藏Docker栏中应用的图标</h3>
<p>在Info.plist中，增加一个配置项: <strong>Application is agent(UIElement)</strong> - <strong>YES</strong>.</p>]]></content><author><name>boybeak</name></author><category term="独立开发笔记" /><category term="macOS" /><summary type="html"><![CDATA[最近开发了JustTodo和DeskNote两个macOS应用，都是启动入口在菜单栏的，通过菜单栏上图标点击，快速执行相关操作，这让我想起我开发第一款菜单栏app Translator时的痛苦。因为想使用最新的SwiftUI作为UI框架，但是此框架构建菜单栏app的资料很少，大多数都是生成一个简单菜单，而不是可以自定义的复杂界面，尤其是用swiftUI构建的界面。 为了解决这一痛点，在总结了JustTodo和DeskNote两个macOS应用开发经验后，决心自己做了一个菜单栏应用快捷库Tray，方便以后使用。]]></summary></entry></feed>