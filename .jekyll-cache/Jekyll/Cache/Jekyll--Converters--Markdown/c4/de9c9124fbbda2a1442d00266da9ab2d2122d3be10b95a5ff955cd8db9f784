I"ï<h1 class="no_toc" id="customization">Customization</h1>

<h2 class="no_toc text-delta" id="table-of-contents">Table of contents</h2>

<ol id="markdown-toc">
  <li><a href="#color-schemes" id="markdown-toc-color-schemes">Color schemes</a></li>
  <li><a href="#custom-schemes" id="markdown-toc-custom-schemes">Custom schemes</a>    <ol>
      <li><a href="#define-a-custom-scheme" id="markdown-toc-define-a-custom-scheme">Define a custom scheme</a></li>
      <li><a href="#use-a-custom-scheme" id="markdown-toc-use-a-custom-scheme">Use a custom scheme</a></li>
      <li><a href="#switchable-custom-scheme" id="markdown-toc-switchable-custom-scheme">Switchable custom scheme</a></li>
    </ol>
  </li>
  <li><a href="#override-and-completely-custom-styles" id="markdown-toc-override-and-completely-custom-styles">Override and completely custom styles</a></li>
</ol>

<hr />

<h2 class="d-inline-block" id="color-schemes">Color schemes</h2>

<p class="label label-green">New</p>

<p>Just the Docs supports two color schemes: light (default), and dark.</p>

<p>To enable a color scheme, set the <code class="language-plaintext highlighter-rouge">color_scheme</code> parameter in your siteâ€™s <code class="language-plaintext highlighter-rouge">_config.yml</code> file:</p>

<h4 class="no_toc" id="example">Example</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Color scheme supports "light" (default) and "dark"</span>
<span class="na">color_scheme</span><span class="pi">:</span> <span class="s">dark</span>
</code></pre></div></div>
<p><button class="btn js-toggle-dark-mode">Preview dark color scheme</button></p>

<script>
const toggleDarkMode = document.querySelector('.js-toggle-dark-mode');

jtd.addEvent(toggleDarkMode, 'click', function(){
  if (jtd.getTheme() === 'dark') {
    jtd.setTheme('light');
    toggleDarkMode.textContent = 'Preview dark color scheme';
  } else {
    jtd.setTheme('dark');
    toggleDarkMode.textContent = 'Return to the light side';
  }
});
</script>

<h2 id="custom-schemes">Custom schemes</h2>

<h3 id="define-a-custom-scheme">Define a custom scheme</h3>

<p>You can add custom schemes.
If you want to add a scheme named <code class="language-plaintext highlighter-rouge">foo</code> (can be any name) just add a file <code class="language-plaintext highlighter-rouge">_sass/color_schemes/foo.scss</code> (replace <code class="language-plaintext highlighter-rouge">foo</code> by your scheme name) 
where you override theme variables to change colors, fonts, spacing, etc.</p>

<p>Available variables are listed in the <a href="https://github.com/pmarsceill/just-the-docs/tree/master/_sass/support/_variables.scss">_variables.scss</a> file.</p>

<p>For example, to change the link color from the purple default to blue, include the following inside your scheme file:</p>

<h4 class="no_toc" id="example-1">Example</h4>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$link-color</span><span class="p">:</span> <span class="nv">$blue-000</span><span class="p">;</span>
</code></pre></div></div>

<p><em>Note:</em> Editing the variables directly in <code class="language-plaintext highlighter-rouge">_sass/support/variables.scss</code> is not recommended and can cause other dependencies to fail.
Please use scheme files.</p>

<h3 id="use-a-custom-scheme">Use a custom scheme</h3>

<p>To use the custom color scheme, only set the <code class="language-plaintext highlighter-rouge">color_scheme</code> parameter in your siteâ€™s <code class="language-plaintext highlighter-rouge">_config.yml</code> file:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">color_scheme</span><span class="pi">:</span> <span class="s">foo</span>
</code></pre></div></div>

<h3 id="switchable-custom-scheme">Switchable custom scheme</h3>

<p>If you want to be able to change the scheme dynamically, for example via javascript, just add a file <code class="language-plaintext highlighter-rouge">assets/css/just-the-docs-foo.scss</code> (replace <code class="language-plaintext highlighter-rouge">foo</code> by your scheme name)
with the following content:`</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
---
{% include css/just-the-docs.scss.liquid color_scheme="foo" %}
</code></pre></div></div>

<p>This allows you to switch the scheme via the following javascript.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">jtd</span><span class="p">.</span><span class="nx">setTheme</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="override-and-completely-custom-styles">Override and completely custom styles</h2>

<p>For styles that arenâ€™t defined as variables, you may want to modify specific CSS classes.
Additionally, you may want to add completely custom CSS specific to your content.
To do this, put your styles in the file <code class="language-plaintext highlighter-rouge">_sass/custom/custom.scss</code>.
This will allow for all overrides to be kept in a single file, and for any upstream changes to still be applied.</p>

<p>For example, if youâ€™d like to add your own styles for printing a page, you could add the following styles.</p>

<h4 class="no_toc" id="example-2">Example</h4>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Print-only styles.</span>
<span class="k">@media</span> <span class="n">print</span> <span class="p">{</span>
  <span class="nc">.side-bar</span><span class="o">,</span> <span class="nc">.page-header</span> <span class="p">{</span> <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.main-content</span> <span class="p">{</span> <span class="nl">max-width</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">1em</span><span class="p">;}</span>
<span class="p">}</span>
</code></pre></div></div>
:ET